{"version":3,"file":"./style-index.css","mappings":";;;AAAA,gBAAgB;AAAhB;;;;;EAAA;ACmFA;;;;CAAA;AAeA;;;;CAAA;AA4BA;;;;CAAA;AAaA;;;;CAAA;AASA;;;;;CAAA;AAiBA;;;;;CAAA;AD5JA;EACC;EACA;EACA;EACA;EACA;AA+BD;AA7BC;EAPD;IAQE;IACA;IACA;EAgCA;AACF,C","sources":["webpack://column-heading-h3/./src/style.scss","webpack://column-heading-h3/../../../Assets/Scss/_p20-configuration.scss"],"sourcesContent":["/**\n * The following styles get applied both on the front of your site\n * and in the editor.\n *\n * Replace them with your own styles or remove the file completely.\n */\n\n@import '../../../../Assets/Scss/_p20-configuration.scss';\n\n.columnHeading3 {\n\tpadding-bottom: 0.8rem;\n\tmargin-bottom: 3.2rem;\n\tfont-size: 2.4rem;\n\tfont-weight: bold;\n\tborder-bottom: 0.3rem solid $primary;\n\n\t@media#{$tab} {\n\t\tpadding-bottom: 0.6rem;\n\t\tfont-size: 1.8rem;\n\t\tfont-size: 2rem;\n\t}\n}\n","@charset 'UTF-8';\n\n// ---------- プライマリーカラー ----------\n$primary: #00b2c4;\n\n// ---------- その他 ----------\n$black_000: #000000;\n$black_333: #333333;\n$black_222: #222222;\n$black_1f1: #1f1f1f;\n$white_fff: #ffffff;\n$white_f2f: #f2f2f2;\n$white_f4f: #f4f4f4;\n$white_f7f: #f7f6f0;\n$blue_0d7: #0d74ce;\n$blue_00b: #00b2c4;\n$blue_005: #005962;\n$lightblue_d4f: #d4f2f5;\n$lightblue_e9f: #e9f4f5;\n$lightblue_eee: #eeeeee;\n$lightgray_efe: #efecea;\n$lightgray_faf: #fafafa;\n$lightgray_e0e: #e0e0e0;\n$orange_e67: #e67e22;\n$lightyellow_f7f: #f7f6f0;\n$gray_324: #324550;\n$gray_454: #454545;\n$gray_ddd: #dddddd;\n$gray_747: #747474;\n$gray_707: #707070;\n$gray_aaa: #aaaaaa;\n$gray_e2e: #e2e2e2;\n$gray_dbd: #dbdbdb;\n$gray_eae: #eaeff3;\n$gray_f8f: #f8f8f8;\n$gray_d0d: #d0d0d0;\n$lightgreen_b7a: #b7ae3f;\n$lightgreen_efe: #efeaab;\n$red_d60: #d60100;\n$red_f23: #f23a3c;\n$pink_ff0: #ff0076;\n\n// ---------- メディアクエリ ----------\n$msp: 'only screen and (max-width:374px)';\n$sp: 'only screen and (max-width:480px)';\n$tab: 'only screen and (max-width:768px)';\n$pc: 'only screen and (max-width:1280px)';\n$pc-max: 'only screen and (min-width:769px)';\n\n// ---------- インナー ----------\n$inner_padding: 2rem;\n$sp_inner: calc(37.5rem + #{$inner_padding * 2});\n$inner: 1356px;\n$one_margin: calc(calc(100vw - #{$inner}) / 2);\n\n\n// ---------- フォント（追記変更可能） ----------\n@mixin noto_sans {\n\tfont-family: 'Noto Sans JP', sans-serif;\n}\n\n@mixin jost {\n\tfont-family: 'Jost', sans-serif;\n}\n\n@mixin YuGothic {\n\tfont-family: '游ゴシック体', 'YuGothic', '游ゴシック', 'Yu Gothic',\n\t'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'メイリオ', 'Meiryo',\n\tsans-serif;\n}\n\n// ---------- 縁取り ----------\n@mixin textShadow($color, $size: 2px) {\n\ttext-shadow: $color $size 0,  $color calc(#{$size} / 2 * -1) 0,\n\t$color 0 calc(#{$size} / 2 * -1), $color 0 $size,\n\t$color $size $size , $color calc(#{$size} / 2 * -1) $size,\n\t$color $size calc(#{$size} / 2 * -1), $color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1),\n\t$color calc(#{$size / 2}) $size,  $color calc(#{$size} / 2 * -1) $size,\n\t$color calc(#{$size / 2}) calc(#{$size} / 2 * -1), $color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1),\n\t$color $size calc(#{$size / 2}),  $color calc(#{$size} / 2 * -1) calc(#{$size / 2}),\n\t$color $size calc(#{$size} / 2 * -1), $color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1);\n}\n\n/** --------------------------------\n* 引数で指定した色の明るさに応じて白か黒を出力する関数\n*\n* @param $color カラーコード\n*/\n@function set_color($color) {\n\t@if (lightness($color) > 50) {\n\t\t@return $black_000;\n\t}\n\n\t@else {\n\t\t@return $white_fff;\n\t}\n}\n\n/** --------------------------------\n* 画像の縦横比を指定する関数  figureタグに付与\n*\n* @param $height 横幅100の時の縦の割合 *「%」で指定\n*/\n@mixin img_aspect_ratio($height) {\n\tposition: relative;\n\twidth: 100%;\n\n\t&::before {\n\t\tdisplay: block;\n\t\tpadding-top: $height;\n\t\tcontent: '';\n\t}\n\n\t& > * {\n\t\tposition: absolute;\n\t\ttop: 0;\n\t\tright: 0;\n\t\tbottom: 0;\n\t\tleft: 0;\n\t\twidth: 100%;\n\t\theight: 100%;\n\t\tmargin: auto;\n\t\tobject-fit: cover;\n\t}\n}\n\n/** --------------------------------\n* cssの値を単位を除いて数字だけにしてくれる関数\n*\n* @param 数字と単位を含む値 10ox, 3remなど\n*/\n@function stripUnit($number) {\n\t@if type-of($number) == 'number' and not unitless($number) {\n\t\t@return $number / ($number * 0 + 1);\n\t}\n\n\t@return $number;\n}\n\n/** --------------------------------\n* 値の「単位」を取得する関数\n*\n* @param $value 数字と単位を含む値 10ox, 3remなど\n*/\n@function getUnit($value) {\n\t@return str-slice($value * 0 + '', 2, -1);\n}\n\n/** --------------------------------\n* pxやremをvwに変換してくれる関数\n*\n* @param $viewport pcデザインの横幅\n* @param $fontSize フォントサイズ(pxでもremでも)\n*/\n@function vw($fontSize, $base-vw: 1356px) {\n\t$unit: getUnit($fontSize);\n\n\t@if $unit == px {\n\t\t@return (stripUnit($fontSize) * 100vw) / stripUnit($base-vw);\n\t}\n\t@else if $unit == rem {\n\t\t@return (stripUnit($fontSize) * 1000vw) / stripUnit($base-vw);\n\t}\n}\n\n/** --------------------------------\n* フォントサイズをレスポンシブで調整する関数\n*\n* @param $pc pcのフォントサイズ\n* @param $sp spのフォントサイズ\n*/\n@function responsiveValue($pc, $sp, $base-vw: 1356px) {\n\t@return clamp($sp, vw($pc, $base-vw) , $pc);\n}\n\n//--------------------------------\n// ホバーのmixin\n//\n// @param\n@mixin hover($element: '') {\n\t@media (hover: hover) {\n\t\t&:where(:any-link, :enabled, summary):hover #{$element} {\n\t\t\t@content;\n\t\t}\n\t}\n}\n\n@mixin transit {\n\ttransition: all 0.4s ease-in-out;\n}\n"],"names":[],"sourceRoot":""}