@charset 'UTF-8';

// ---------- プライマリーカラー ----------
$primary: #00b2c4;

// ---------- その他 ----------
$black_000: #000000;
$black_333: #333333;
$black_222: #222222;
$black_1f1: #1f1f1f;
$white_fff: #ffffff;
$white_f2f: #f2f2f2;
$white_f4f: #f4f4f4;
$white_f7f: #f7f6f0;
$blue_0d7: #0d74ce;
$blue_00b: #00b2c4;
$blue_005: #005962;
$lightblue_d4f: #d4f2f5;
$lightblue_e9f: #e9f4f5;
$lightblue_eee: #eeeeee;
$lightgray_efe: #efecea;
$lightgray_faf: #fafafa;
$lightgray_e0e: #e0e0e0;
$orange_e67: #e67e22;
$lightyellow_f7f: #f7f6f0;
$gray_324: #324550;
$gray_454: #454545;
$gray_ddd: #dddddd;
$gray_747: #747474;
$gray_707: #707070;
$gray_aaa: #aaaaaa;
$gray_e2e: #e2e2e2;
$gray_dbd: #dbdbdb;
$gray_eae: #eaeff3;
$gray_f8f: #f8f8f8;
$gray_f7f: #f7f7f7;
$gray_f0f: #F0F0F0;
$gray_d0d: #d0d0d0;
$lightgreen_b7a: #b7ae3f;
$lightgreen_efe: #efeaab;
$red_d60: #d60100;
$red_f23: #f23a3c;
$pink_ff0: #ff0076;

// ---------- メディアクエリ ----------
$msp: 'only screen and (max-width:374px)';
$sp: 'only screen and (max-width:480px)';
$tab: 'only screen and (max-width:768px)';
$header: 'only screen and (max-width:1000px)';
$pc: 'only screen and (max-width:1280px)';
$pc-max: 'only screen and (min-width:769px)';

// ---------- インナー ----------
$inner_padding: 2rem;
$sp_inner: calc(37.5rem + #{$inner_padding * 2});
$inner: 1356px;
$one_margin: calc(calc(100vw - #{$inner}) / 2);


// ---------- フォント（追記変更可能） ----------
@mixin noto_sans {
	font-family: 'Noto Sans JP', sans-serif;
}

@mixin jost {
	font-family: 'Jost', sans-serif;
}

@mixin eb {
	font-family: "EB Garamond", serif;
	font-weight: 400;
}

@mixin YuMincho {
	font-family: '明朝体', 'Yu Mincho', 'YuMincho', serif;
}

@mixin YuGothic {
	font-family: '游ゴシック体', 'YuGothic', '游ゴシック', 'Yu Gothic',
	'ヒラギノ角ゴ Pro W3', 'Hiragino Kaku Gothic Pro', 'メイリオ', 'Meiryo',
	sans-serif;
}

// ---------- 縁取り ----------
@mixin textShadow($color, $size: 2px) {
	text-shadow: $color $size 0,  $color calc(#{$size} / 2 * -1) 0,
	$color 0 calc(#{$size} / 2 * -1), $color 0 $size,
	$color $size $size , $color calc(#{$size} / 2 * -1) $size,
	$color $size calc(#{$size} / 2 * -1), $color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1),
	$color calc(#{$size / 2}) $size,  $color calc(#{$size} / 2 * -1) $size,
	$color calc(#{$size / 2}) calc(#{$size} / 2 * -1), $color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1),
	$color $size calc(#{$size / 2}),  $color calc(#{$size} / 2 * -1) calc(#{$size / 2}),
	$color $size calc(#{$size} / 2 * -1), $color calc(#{$size} / 2 * -1) calc(#{$size} / 2 * -1);
}

/** --------------------------------
* 引数で指定した色の明るさに応じて白か黒を出力する関数
*
* @param $color カラーコード
*/
@function set_color($color) {
	@if (lightness($color) > 50) {
		@return $black_000;
	}

	@else {
		@return $white_fff;
	}
}

/** --------------------------------
* 画像の縦横比を指定する関数  figureタグに付与
*
* @param $height 横幅100の時の縦の割合 *「%」で指定
*/
@mixin img_aspect_ratio($height) {
	position: relative;
	width: 100%;

	&::before {
		display: block;
		padding-top: $height;
		content: '';
	}

	& > * {
		position: absolute;
		top: 0;
		right: 0;
		bottom: 0;
		left: 0;
		width: 100%;
		height: 100%;
		margin: auto;
		object-fit: cover;
	}
}

/** --------------------------------
* cssの値を単位を除いて数字だけにしてくれる関数
*
* @param 数字と単位を含む値 10ox, 3remなど
*/
@function stripUnit($number) {
	@if type-of($number) == 'number' and not unitless($number) {
		@return $number / ($number * 0 + 1);
	}

	@return $number;
}

/** --------------------------------
* 値の「単位」を取得する関数
*
* @param $value 数字と単位を含む値 10ox, 3remなど
*/
@function getUnit($value) {
	@return str-slice($value * 0 + '', 2, -1);
}

/** --------------------------------
* pxやremをvwに変換してくれる関数
*
* @param $viewport pcデザインの横幅
* @param $fontSize フォントサイズ(pxでもremでも)
*/
@function vw($fontSize, $base-vw: 1356px) {
	$unit: getUnit($fontSize);

	@if $unit == px {
		@return (stripUnit($fontSize) * 100vw) / stripUnit($base-vw);
	}
	@else if $unit == rem {
		@return (stripUnit($fontSize) * 1000vw) / stripUnit($base-vw);
	}
}

/** --------------------------------
* フォントサイズをレスポンシブで調整する関数
*
* @param $pc pcのフォントサイズ
* @param $sp spのフォントサイズ
*/
@function responsiveValue($pc, $sp, $base-vw: 1356px) {
	@return clamp($sp, vw($pc, $base-vw) , $pc);
}

//--------------------------------
// ホバーのmixin
//
// @param
@mixin hover($element: '') {
	@media (hover: hover) {
		&:where(:any-link, :enabled, summary):hover #{$element} {
			@content;
		}
	}
}

@mixin transit {
	transition: all 0.4s ease-in-out;
}
